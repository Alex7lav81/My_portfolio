{
	"info": {
		"_postman_id": "dea014a1-bee3-4ebf-b8b7-872c8925e1a6",
		"name": "Group_22",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_3_Env_home3",
			"item": [
				{
					"name": "Task_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "Task_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// let jsonData = JSON.parse(responseBody);\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData.name);\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Alexandra\");\r",
									"});\r",
									"\r",
									"pm.test(\"Your test age\", function () {\r",
									"   pm.expect(jsonData.age).to.eql(\"40\");\r",
									"});\r",
									"\r",
									"pm.test(\"Your test salary\", function () {\r",
									"   pm.expect(jsonData.salary).to.eql(3000);\r",
									"});\r",
									"\r",
									"// let req_data = request.data.name;\r",
									"\r",
									"let req_data = request.data;\r",
									"pm.test(\"Name is correct\", function () {\r",
									"   pm.expect(jsonData.name).to.eql(req_data.name);\r",
									"    //    console.log(jsonData.name);\r",
									"    //    console.log(req_data.name)\r",
									"});\r",
									"\r",
									"pm.test(\"Age is correct\", function () {\r",
									"   pm.expect(jsonData.age).to.eql(req_data.age);\r",
									"});\r",
									"\r",
									"pm.test(\"Salary is correct\", function () {\r",
									"   pm.expect(jsonData.salary).to.eql(+req_data.salary);\r",
									"});\r",
									"\r",
									"console.log(jsonData.family);\r",
									"\r",
									"pm.test(\"Salary after 1,5 years is correct\", function () {\r",
									"   pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_data.salary * 4);\r",
									"});\r",
									"// console.log(jsonData.family.u_salary_1_5_year);\r",
									"// console.log(req_data.salary * 4);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Alexandra",
									"type": "text"
								},
								{
									"key": "age",
									"value": "40",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Task_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let resp_data = pm.response.json();\r",
									"let req_data = pm.request.url.query.toObject();\r",
									"pm.test(\"Your test name\", function () {\r",
									"    pm.expect(resp_data.name).to.eql(req_data.name);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test age\", function () {\r",
									"    pm.expect(resp_data.age).to.eql(req_data.age);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test salary\", function() {\r",
									"    pm.expect(resp_data.salary).to.eql(+req_data.salary);\r",
									"});\r",
									"\r",
									"console.log(resp_data.family);\r",
									"\r",
									"pm.test(\"Dog has name param\", function() {\r",
									"    pm.expect(resp_data.family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Dog has age param\", function() {\r",
									"    pm.expect(resp_data.family.pets.dog).to.have.property(\"age\");\r",
									"});\r",
									"\r",
									"pm.test(\"Dog has right name\", function() { \r",
									"    pm.expect(resp_data.family.pets.dog.name).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"pm.test(\"Dog has right age\", function() { \r",
									"    pm.expect(resp_data.family.pets.dog.age).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Alexandra&age=40&salary=3000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Alexandra"
								},
								{
									"key": "age",
									"value": "40"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Task_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let resp_data = pm.response.json();\r",
									"let req_data = pm.request.url.query.toObject();\r",
									"\r",
									"pm.test(\"Your name is Alexandra\", function () {\r",
									"    pm.expect(resp_data.name).to.eql(req_data.name);\r",
									"});\r",
									"\r",
									"pm.test(\"Your age is 40\", function() {\r",
									"    pm.expect(resp_data.age).to.eql(+req_data.age);\r",
									"});\r",
									"\r",
									"console.log(\"Salary from request: \", req_data.salary);\r",
									"console.log(\"Salary from response: \", resp_data.salary);\r",
									"\r",
									"console.log(\"Salary[0] from response: \", resp_data.salary[0]);\r",
									"console.log(\"Salary[1] from response: \", +resp_data.salary[1]);\r",
									"console.log(\"Salary[2] from response: \", +resp_data.salary[2]);\r",
									"\r",
									"pm.test(\"Salary is correct\", function () {\r",
									"    pm.expect(resp_data.salary[0]).to.eql(+req_data.salary);\r",
									"});\r",
									"\r",
									"pm.test(\"Salary2 is correct\", function () {\r",
									"    pm.expect(+resp_data.salary[1]).to.eql(req_data.salary*2);\r",
									"});\r",
									"\r",
									"pm.test(\"Salary3 is correct\", function () {\r",
									"    pm.expect(+resp_data.salary[2]).to.eql(req_data.salary*3);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"name\", resp_data.name);\r",
									"pm.environment.set(\"age\", resp_data.age);\r",
									"pm.environment.set(\"salary\", resp_data.salary[0]);\r",
									"\r",
									"for (let i=0; i < 3; i++) {\r",
									"    console.log(resp_data.salary[i]);\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Alexandra&age=40&salary=3000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Alexandra"
								},
								{
									"key": "age",
									"value": "40"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Task_5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let resp_body = pm.response.json();\r",
									"let req_data = request.data;\r",
									"pm.test(\"Response has start_qa_salary\", function () {\r",
									"    pm.expect(resp_body).to.have.property(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has qa_salary_after_6_months\", function () {\r",
									"    pm.expect(resp_body).to.have.property(\"qa_salary_after_6_months\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(resp_body).to.have.property(\"qa_salary_after_1.5_year\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(resp_body).to.have.property(\"qa_salary_after_3.5_years\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has person\", function () {\r",
									"    pm.expect(resp_body).to.have.property(\"person\");\r",
									"});\r",
									"\r",
									"pm.test(\"Start_qa_salary is correct\", function () {\r",
									"   pm.expect(resp_body.start_qa_salary).to.eql(+req_data.salary);\r",
									"});\r",
									"\r",
									"pm.test(\"Qa_salary_after_6_months is correct\", function () {\r",
									"   pm.expect(resp_body.qa_salary_after_6_months).to.eql(req_data.salary*2);\r",
									"});\r",
									"\r",
									"pm.test(\"Qa_salary_after_12_months is correct\", function () {\r",
									"   pm.expect(resp_body.qa_salary_after_12_months).to.eql(req_data.salary*2.7);\r",
									"});\r",
									"\r",
									"pm.test(\"Qa_salary_after_1.5_year is correct\", function () {\r",
									"   pm.expect(resp_body['qa_salary_after_1.5_year']).to.eql(req_data.salary*3.3);\r",
									"});\r",
									"\r",
									"pm.test(\"Qa_salary_after_3.5_years is correct\", function () {\r",
									"   pm.expect(resp_body['qa_salary_after_3.5_years']).to.eql(req_data.salary*3.8);\r",
									"});\r",
									"\r",
									"pm.test(\"Salary is correct\", function () {\r",
									"   pm.expect(resp_body.person.u_name[1]).to.eql(+req_data.salary);\r",
									"});\r",
									"\r",
									"pm.test(\"Age is correct\", function () {\r",
									"   pm.expect(resp_body.person.u_age).to.eql(+req_data.age);\r",
									"});\r",
									"\r",
									"pm.test(\"u_salary_5_years is correct\", function () {\r",
									"   pm.expect(resp_body.person.u_salary_5_years).to.eql(req_data.salary*4.2);\r",
									"});\r",
									"\r",
									"for (i in resp_body.person) {\r",
									"    console.log(i, resp_body.person[i]);\r",
									"};\r",
									"// the second way:\r",
									"// Object.keys(resp_body.person).forEach(function(i ){\r",
									"//     console.log(i, resp_body.person[i]);\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2_Env_group22",
			"item": [
				{
					"name": "Get_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);\r",
									"console.log(jsonData);\r",
									"\r",
									"pm.environment.set(\"token\", jsonData.token);\r",
									"\r",
									"//the seсond way: \r",
									"//let jsonData = pm.response.json();\r",
									"//pm.environment.set(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "Alex7lav",
									"type": "text"
								},
								{
									"key": "password",
									"value": "160581",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}login",
							"host": [
								"{{url}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//let salary = jsonData.start_qa_salary;\r",
									"let sal = JSON.parse(request.data);\r",
									"let salary = sal.salary;\r",
									"console.log(salary);\r",
									"let salary_6m = jsonData.qa_salary_after_6_months;\r",
									"let salary_12m = jsonData.qa_salary_after_12_months;\r",
									"let salary_1_5y = jsonData.person.u_salary_1_5_year;\r",
									"pm.test(\"Check results salary\", function () {\r",
									"    pm.expect(salary_6m).to.eql(salary * 2);\r",
									"    pm.expect(salary_12m).to.eql(salary * 2.9);\r",
									"    pm.expect(salary_1_5y).to.eql(salary * 4);\r",
									"});\r",
									"// console.log(salary);\r",
									"// console.log(salary_1_5y);\r",
									"\r",
									"pm.collectionVariables.set(\"u_salary_1_5_year\", salary_1_5y);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"age\": 40, \"salary\": 3000, \"name\": \"Alexandra\", \"auth_token\": \"{{token}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user_info",
							"host": [
								"{{url}}user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "New_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"let salary = jsonData.salary[0];\r",
									"let salary_2 = parseInt(jsonData.salary[1]);\r",
									"let salary_3 = parseInt(jsonData.salary[2]);\r",
									"\r",
									"pm.test(\"Check results salary\", function () {\r",
									"    pm.expect(salary_2).to.eql(salary * 2);\r",
									"    pm.expect(salary_3).to.eql(salary * 3);\r",
									"});\r",
									"console.log(salary_2);\r",
									"console.log(salary_3);\r",
									"\r",
									"pm.test(\"Compare results salary\", function () {\r",
									"    pm.expect(salary_3).above(salary_2);\r",
									"    pm.expect(salary_3).above(salary);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "40",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Alexandra",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}new_data",
							"host": [
								"{{url}}new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"daily_food\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"daily_sleep\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"daily_food\",\r",
									"    \"daily_sleep\",\r",
									"    \"name\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"let weightData = request.data.weight;\r",
									"console.log(weightData);\r",
									"pm.test(\"Check results weight\", function () {\r",
									"    pm.expect(jsonData.daily_food).to.eql(weightData * 0.012);\r",
									"    pm.expect(jsonData.daily_sleep).to.eql(weightData * 2.5);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "40",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "60",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Alexandra",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}test_pet_info",
							"host": [
								"{{url}}test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"name\", jsonData.name);\r",
									"let schema = \r",
									"\r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"// let req_data = JSON.parse(request.data);\r",
									"// let name_data = req_data.name;\r",
									"// console.log(req_data);\r",
									"\r",
									"// let env_name = pm.environment.get(\"name\");\r",
									"// console.log(env_name);\r",
									"\r",
									"pm.test(\"Compare names\", function() {\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
									"});\r",
									"\r",
									"let age_req = request.data.age;\r",
									"let age_resp = JSON.parse(responseBody)\r",
									"console.log(age_req);\r",
									"console.log(age_resp.age);\r",
									"pm.test(\"Compare ages\", function() {\r",
									"    pm.expect(age_resp.age).to.equal(age_req);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "40",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{u_salary_1_5_year}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Alexandra",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}get_test_user",
							"host": [
								"{{url}}get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JsonData = pm.response.json();\r",
									"console.log(JsonData.length)\r",
									"\r",
									"function getRandomInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"let random_int = getRandomInRange(1, JsonData.length);\r",
									"console.log(random_int);\r",
									"let cur_id_random = JsonData[random_int].Cur_ID;\r",
									"console.log(cur_id_random);\r",
									"\r",
									"pm.environment.set(\"Cur_ID\", JsonData[random_int].Cur_ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}currency",
							"host": [
								"{{url}}currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "Curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// let jsonData = pm.response.json();\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_ID\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Cur_Name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_OfficialRate\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"Cur_Scale\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Date\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Cur_Abbreviation\",\r",
									"    \"Cur_ID\",\r",
									"    \"Cur_Name\",\r",
									"    \"Cur_OfficialRate\",\r",
									"    \"Cur_Scale\",\r",
									"    \"Date\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{Cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}curr_byn",
							"host": [
								"{{url}}curr_byn"
							]
						}
					},
					"response": []
				},
				{
					"name": "Curr_byn_iter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JsonData = pm.response.json();\r",
									"const length_json = JsonData.length;\r",
									"console.log(length_json);\r",
									"let cur_arr = [];\r",
									"for (let i = 0; i < length_json; i++) {\r",
									"  cur_arr.push(JsonData[i].Cur_ID);\r",
									"};\r",
									"console.log(cur_arr);\r",
									"\r",
									"// for (let j = 0; j < 3; j++) {\r",
									"    \r",
									"//     pm.sendRequest(\"http://162.55.220.72:5005/curr_byn\", function (err, response) { \r",
									"//         console.log(cur_arr[j]);\r",
									"//     });\r",
									"    // if (pm.response.to.have.status(500)) {\r",
									"    //     continue;\r",
									"    // } else {\r",
									"    //     if (pm.response.to.have.status(200)) {     \r",
									"    //         if (pm.response.json().Cur_OfficialRate !== 0) {\r",
									"    //             return pm.response.json();\r",
									"    //         };\r",
									"    //     };\r",
									"    // };\r",
									"// };\r",
									"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
									"//     console.log(response.json());\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}currency",
							"host": [
								"{{url}}currency"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_1",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=Alexandra&age=40",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Alexandra"
								},
								{
									"key": "age",
									"value": "40"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Alexandra",
									"type": "text"
								},
								{
									"key": "age",
									"value": "40",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=Alexandra&age=40&weight=60",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Alexandra"
								},
								{
									"key": "age",
									"value": "40"
								},
								{
									"key": "weight",
									"value": "60"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=Alexandra&age=40&salary=3000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Alexandra"
								},
								{
									"key": "age",
									"value": "40"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Alexandra&age=40&salary=3000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Alexandra"
								},
								{
									"key": "age",
									"value": "40"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Alexandra&age=40&salary=7000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Alexandra"
								},
								{
									"key": "age",
									"value": "40"
								},
								{
									"key": "salary",
									"value": "7000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Alexandra",
									"type": "text"
								},
								{
									"key": "age",
									"value": "40",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "u_salary_1_5_year",
			"value": ""
		}
	]
}